<?xml version="1.0" encoding="UTF-8"?>

<!--根节点configuration -->
    <!--
    包含三个属性值:
        scan:当此属性设置为true时，配置文件如果发生改变，将会被重新加载，默认值为true。
        debug: 当此属性设置为true时，将打印出logback内部日志信息，实时查看logback运行状态。默认值为false。
        scanPeriod: 设置监测配置文件是否有修改的时间间隔，如果没有给出时间单位，默认单位是毫秒。当scan为true时，此属性生效。默认的时间间隔为1分钟。

    示例
        <configuration scan="true" scanPeriod="60 seconds" debug="false">
    -->
<configuration scan="true" scanPeriod="60 seconds" debug="false">

    <!--子节点contextName-->
        <!--
        用来设置上下文名称
        -->
    <contextName>logback</contextName>
    <!--子节点Property-->
    <!--
        用来定义变量值，它有两个属性name和value，通过<property>定义的值会被插入到logger上下文中，可以使“${}”来使用变量。
        name: 变量的名称
        value: 的值时变量定义的值
    -->
    <property name="log_path" value="C:/data/unfair-ssm/logs" />
    <!-- 日志最大的历史 30天 -->
    <property name="maxHistory" value="30"/>
    <!--子节点appender-->
    <!--
        负责写日志的组件，它有两个必要属性name和class。class用来指定哪种输出策略，常用就是控制台输出策略和文件输出策略。
        name指定appender名称，
        class指定appender的全限定名

        appender class 类型主要有三种：ConsoleAppender、FileAppender、RollingFileAppender
            ConsoleAppender 把日志输出到控制台，有以下子节点：
            <encoder>：对日志进行格式化。
            详情参考https://www.cnblogs.com/ClassNotFoundException/p/6964435.html
            <target>：字符串System.out(默认)或者System.err

            FileAppender：把日志添加到文件，有以下子节点：
            <file>：被写入的文件名，可以是相对目录，也可以是绝对目录，如果上级目录不存在会自动创建，没有默认值。
            <append>：如果是 true，日志被追加到文件结尾，如果是 false，清空现存文件，默认是true。
            <encoder>：对记录事件进行格式化。（具体参数稍后讲解 ）
            <prudent>：如果是 true，日志会被安全的写入文件，即使其他的FileAppender也在向此文件做写入操作，效率低，默认是 false。

            RollingFileAppender：滚动记录文件，先将日志记录到指定文件，当符合某个条件时，将日志记录到其他文件。有以下子节点：
            <file>：被写入的文件名，可以是相对目录，也可以是绝对目录，如果上级目录不存在会自动创建，没有默认值。
            <append>：如果是 true，日志被追加到文件结尾，如果是 false，清空现存文件，默认是true。
            <rollingPolicy>:当发生滚动时，决定RollingFileAppender的行为，涉及文件移动和重命名。属性class定义具体的滚动策略类
            class="ch.qos.logback.core.rolling.TimeBasedRollingPolicy，是最受欢迎的滚动政策，例如按天或按月。 TimeBasedRollingPolicy承担翻滚责任以及触发所述翻转的责任。TimeBasedRollingPolicy支持自动文件压缩。
            有时您可能希望按日期归档文件，但同时限制每个日志文件的大小，特别是如果后处理工具对日志文件施加大小限制。为了满足这一要求，logback随附 SizeAndTimeBasedRollingPolicy。
            请注意除“％d”之外的“％i”转换标记。％i和％d令牌都是强制性的。每当当前日志文件在当前时间段结束之前达到maxFileSize时，它将以增加的索引存档，从0开始。
    -->
    <appender name="console" class="ch.qos.logback.core.ConsoleAppender">
        <!--根据范围过滤日志，只输出INFO级别的日志-->
        <filter class="ch.qos.logback.classic.filter.ThresholdFilter">
            <level>INFO</level>
        </filter>
        <encoder>
            <!--<pattern>%d %p (%file:%line\)- %m%n</pattern>-->
            <!--格式化输出：%d:表示日期    %thread:表示线程名     %-5level:级别从左显示5个字符宽度  %msg:日志消息    %n:是换行符-->
            <pattern>控制台-%d{yyyy-MM-dd HH:mm:ss} [%thread] %-5level %logger - %msg%n</pattern>
            <charset>GBK</charset>
        </encoder>
    </appender>

    <!--输出到文件-->
    <appender name="fileInfoLog" class="ch.qos.logback.core.rolling.RollingFileAppender">
        <!--被写入的文件名，可以是相对目录，也可以是绝对目录，如果上级目录不存在会自动创建，没有默认值。-->
        <file>C:\Users\92897\IdeaProjects\FeraoTest\Unfiar-ssm\logs\unfair-all.log</file>
        <!--<append>：如果是 true，日志被追加到文件结尾，如果是 false，清空现存文件，默认是true-->
        <append>true</append>
        <!--根据级别过滤掉匹配的日志，不输出error级别的日志-->
        <filter class="ch.qos.logback.classic.filter.LevelFilter">
            <level>ERROR</level>
            <!--匹配上ERROR级别的日志信息，则不会输出到该文件中-->
            <onMatch>DENY</onMatch>
            <!--匹配不上ERROR级别的日志信息，则输出到该文件中DENY-->
            <onMismatch>ACCEPT</onMismatch>
            <!--这样过滤以后，该文件中只会输出info级别的日志信息ACCEPT-->
        </filter>
        <encoder>
            <!--格式化输出：%d:表示日期    %thread:表示线程名     %-5level:级别从左显示5个字符宽度  %msg:日志消息    %n:是换行符-->
            <pattern>文件记录-%d{yyyy-MM-dd HH:mm:ss} [%thread] %-5level %logger{36} - %msg%n</pattern>
            <!--<charset>UTF-8</charset>-->
        </encoder>
        <!--滚动策略，按时间每天生成一个日志文件-->
        <!--<rollingPolicy>:当发生滚动时，决定RollingFileAppender的行为，涉及文件移动和重命名。属性class定义具体的滚动策略类-->
        <!--TimeBaseRollingPolicy ：最常用的滚动策略，根据时间来制定滚动策略，即负责滚动也负责触发滚动。有如下节点-->
        <rollingPolicy class="ch.qos.logback.core.rolling.TimeBasedRollingPolicy">
            <!--文件路径-->
            <!--
                在输出日志文件的时候，这里使用的配置变量，在打包成war的时候，如果使用绝对路径的话，日志会直接输出
                如果使用的是相对路径的话，当部署到tomcat路径下的时候，默认是输出到tomcat的bin目录下的，如/log，就会输出到bin/log目录下
            -->
            <fileNamePattern>${log_path}/logback-%d{yyyy-MM-dd}.log</fileNamePattern>
            <maxHistory>${maxHistory}</maxHistory>
            <totalSizeCap>1GB</totalSizeCap>
        </rollingPolicy>
    </appender>
    <!--配置error信息输出到一个文件-->
    <appender name="fileErrorLog" class="ch.qos.logback.core.rolling.RollingFileAppender">
        <file>C:\Users\92897\IdeaProjects\FeraoTest\Unfiar-ssm\logs\unfair-error.log</file>
        <!--根据范围过滤日志，只输出error级别的日志-->
        <filter class="ch.qos.logback.classic.filter.ThresholdFilter">
            <level>ERROR</level>
        </filter>
        <!--日志输出格式-->
        <encoder>
            <pattern>文件记录-%d{yyyy-MM-dd HH:mm:ss} [%thread] %-5level %logger{36} - %msg%n</pattern>
        </encoder>
        <!--滚动策略，按时间每天生成一个日志文件-->
        <rollingPolicy class="ch.qos.logback.core.rolling.TimeBasedRollingPolicy">
            <!--文件路径-->
            <fileNamePattern>${log_path}/logback.%d{yyyy-MM-dd}.error.log</fileNamePattern>
            <maxHistory>${maxHistory}</maxHistory>
            <totalSizeCap>1GB</totalSizeCap>
        </rollingPolicy>
    </appender>

    <!--子节点:logger-->
    <!--
        用来设置某一个包或者具体的某一个类的日志打印级别、以及指定<appender>。<logger>仅有一个name属性，一个可选的level和一个可选的addtivity属性。
        name：用来指定受此logger约束的某一个包或者具体的某一个类。
        level：用来设置打印级别，大小写无关：TRACE, DEBUG, INFO, WARN, ERROR, ALL 和 OFF，还有一个特俗值INHERITED或者同义词NULL，代表强制执行上级的级别。如果未设置此属性，那么当前logger将会继承上级的级别。
        addtivity：是否向上级logger传递打印信息。默认是true。
    -->
    <!--<logger name="com.unfair.mapper" level="debug" additivity="false">-->
        <!--<appender-ref ref="console"/>-->
    <!--</logger>-->
    <!--标识这个appender将会添加到这个loger。-->
    <!--子节点:root-->
    <!--
        root节点是必选节点，用来指定最基础的日志输出级别，只有一个level属性，用来设置打印级别，大小写无关：
        TRACE, DEBUG, INFO, WARN, ERROR, ALL 和 OFF，不能设置为INHERITED或者同义词NULL。默认是DEBUG。
        可以包含零个或多个元素，标识这个appender将会添加到这个logger。
        通过appender-ref关联前面指定项的日志输出级别
    -->
    <root level="INFO">
        <appender-ref ref="console" />
        <appender-ref ref="fileInfoLog" />
        <appender-ref ref="fileErrorLog" />
    </root>

</configuration>
